<link href="{{ '/dbc/css/dbc.css'|filemtime }}" rel="stylesheet">
<div class="container-fluid">
    <select id='fileFilter' class='form-control form-control-sm'>
        <option value="">Select a table</option>
        {% for table in tables %}
            <option value='{{ table.name }}' {% if not (selectedDbc is empty) and selectedDbc == table.name %}selected{% endif %}>
                {{ table.displayName }}
            </option>
        {% endfor %}
    </select>
    {% if not currentDB is empty %}
        <form class='form-inline' id='dbcform' action='/dbc/diff.php' method='GET'>
            <input type='hidden' name='dbc' value='{{ selectedDbc }}'>
            <label for='oldbuild' class='' style='float: left; padding-left: 15px;'>Old </label>
            <select id='oldbuild' name='old' class='form-control form-control-sm buildFilter'>
                {% for row in versions %}
                    <option value='{{ row.version }}' {% if (not (old is empty) and old == row.version) or (new is empty and row.version == versions[1].version) %}selected{% endif %}>{{ row.version }}</option>
                {% endfor %}
            </select>
            <label for='newbuild' class='' style='float: left; padding-left: 15px;'> New </label>
            <select id='newbuild' name='new' class='form-control form-control-sm buildFilter'>
                {% for row in versions %}
                    <option value='{{ row.version }}'{% if not (new is empty) and new == row.version %}selected{% endif %}>{{ row.version }}</option>
                {% endfor %}
            </select>
            <div class="form-check" style='padding-left: 5px;'>
                <input type="checkbox" class="form-check-input" id="useHotfixes" name="useHotfixes" {% if not (useHotfixes is empty) %}checked{% endif %}>
                <label class="form-check-label" for="useHotfixes">Use hotfixes?</label>
            </div>
            <input type='submit' id='browseButton' class='form-control form-control-sm btn btn-sm btn-primary' value='Diff'>
        </form><br>
    {% endif %}
    <div id='tableContainer'></div>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.7/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.7/js/select2.min.js"></script>
<script src="{{ '/dbc/js/dbc.js'|filemtime }}"></script>
<script src="{{ '/js/diff_match_patch.js'|filemtime }}"></script>
<script type='text/javascript'>
    {# TODO: move to js #}
    $(function() {
        $('#fileFilter').select2();
    });
    
    {% if canDiff %}
        $(function() {

            var oldBuild = $("#oldbuild option:selected").text();
            var newBuild = $("#newbuild option:selected").text();
            var dataURL = API_URL + "/api/diff?name={{ currentDB.name }}&build1=" + oldBuild + "&build2=" + newBuild;
            if($("#useHotfixes").is(":checked")){
                dataURL += "&useHotfixesFor2=true";
            }
            var header1URL = API_URL + "/api/header/{{ currentDB.name }}/?build=" + oldBuild;
            var header2URL = API_URL + "/api/header/{{ currentDB.name }}/?build=" + newBuild;

            $.when($.getJSON(header1URL), $.getJSON(header2URL)).then(function (resp1, resp2) {
                //this callback will be fired once all ajax calls have finished.
                if(resp1[0]['error'] != null){
                    alert("An error occured on the server:\n" + resp1[0]['error']);
                }

                if(resp2[0]['error'] != null){
                    alert("An error occured on the server:\n" + resp2[0]['error']);
                }
                var fields = [...new Set([].concat(...resp1[0].headers, ...resp2[0].headers))];
                var tableHeaders = "";
                $.each(fields, function(i, val){
                    tableHeaders += "<th>" + val + "</th>";
                });

                $("#tableContainer").empty();
                $("#tableContainer").append('<table id="dbtable" class="table table-striped table-bordered table-condensed" cellspacing="0" width="100%"><thead><tr>' + tableHeaders + '</tr></thead></table>');
                $.ajax({
                    "url": dataURL,
                    "success": function ( json ) {
                        $('#dbtable').DataTable({
                            "data": json['data'],
                            "pageLength": 25,
                            "ordering": false,
                            "bFilter": false,
                            "lengthMenu": [[10, 25, 50, 100, 1000], [10, 25, 50, 100, 1000]],
                            "pagingType": "input",
                            "dom": "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" + "<'row'<'col-sm-12 dbtableholder'tr>>" + "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                            "columnDefs": [{
                                "targets": "_all",
                                "render":
                                /*
                                Overrides cell rendering in particular the cell's value if there is an applicable diff
                                - for Added/Removed, this applies a flat +/- diff snippet
                                - for Replaced this applies a html snippet containing diff information
                                    - for numbers this is a flat '-x+y', for text diff_match_patch is used
                                    */
                                    function (data, type, row, meta) {

                                        // grab the formatted field name
                                        var field = meta.settings.aoColumns[meta.col].sTitle;

                                        //! USE THIS
                                        // if an array split out the field and ordinal
                                        //var match = /^(.*)\[(\d+)\]$/.exec(field);
                                        var match = false;

                                        // assign the cell value
                                        data = match ? row.row[match[1]][match[2]] : row.row[field];

                                        // only apply on the initial display event for replaced rows that have a diff
                                        if(type !== 'display' || row.op !== "Replaced" || row.diff === null)
                                            return data;

                                        // find and apply the specific diff for this field
                                        // if no diff is found then return the default data value
                                        var diff = row.diff.find(x => x.property == field);
                                        if(!diff) {
                                            return data;
                                        }

                                        // apply the diff html information
                                        switch(diff.op) {

                                            case "Added":
                                                return '<ins class="diff-added">' + diff.currentvalue + '</ins>';
                                            case "Removed":
                                                return '<del class="diff-removed">' + diff.currentvalue + '</del>';
                                            case "Replaced":
                                            {
                                                if(!isNaN(diff.previousvalue) && !isNaN(diff.currentvalue)) {
                                                    // for numbers return a fake diff to save on computation
                                                    return '<del class="diff-removed">' + diff.previousvalue + '</del> &rarr; ' +
                                                        '<ins class="diff-added">' + diff.currentvalue + '</ins>';
                                                } else {
                                                    // for text use diff_match_patch to compute a real diff
                                                    var dmp = new diff_match_patch();
                                                    var dmp_diff = dmp.diff_main(diff.previousvalue, diff.currentvalue);
                                                    dmp.diff_cleanupSemantic(dmp_diff);
                                                    return dmp.diff_prettyHtml(dmp_diff);
                                                }
                                            }
                                        }

                                        return data;
                                    },
                                "defaultContent": ""
                            }],
                            "language": {
                                "emptyTable": "No differences were found"
                            },
                            "createdRow":
                            /* Overrides row rendering for Added/Removed rows */
                            function(ele, row, rowIndex) {
                                if(row.op == "Added" || row.op == "Removed") {
                                    $(ele).addClass(row.op.toLowerCase()); // apply the formatting class
                                }
                            }
                        });
                    },
                    "dataType": "json"
                });
            });
        });
    {% endif %}
    
    $('#fileFilter').on( 'change', function () {
        if($(this).val() != ""){
            document.location = "/dbc/diff.php?dbc=" + $(this).val();
        }
    });
</script>